// Code generated by MockGen. DO NOT EDIT.
// Source: study_marketplace/pkg/repositories (interfaces: AvatarsRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entities "study_marketplace/pkg/domain/models/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockAvatarsRepository is a mock of AvatarsRepository interface.
type MockAvatarsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAvatarsRepositoryMockRecorder
}

// MockAvatarsRepositoryMockRecorder is the mock recorder for MockAvatarsRepository.
type MockAvatarsRepositoryMockRecorder struct {
	mock *MockAvatarsRepository
}

// NewMockAvatarsRepository creates a new mock instance.
func NewMockAvatarsRepository(ctrl *gomock.Controller) *MockAvatarsRepository {
	mock := &MockAvatarsRepository{ctrl: ctrl}
	mock.recorder = &MockAvatarsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvatarsRepository) EXPECT() *MockAvatarsRepositoryMockRecorder {
	return m.recorder
}

// CreateAvatar mocks base method.
func (m *MockAvatarsRepository) CreateAvatar(arg0 context.Context, arg1 *entities.Avatar) (*entities.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAvatar", arg0, arg1)
	ret0, _ := ret[0].(*entities.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAvatar indicates an expected call of CreateAvatar.
func (mr *MockAvatarsRepositoryMockRecorder) CreateAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAvatar", reflect.TypeOf((*MockAvatarsRepository)(nil).CreateAvatar), arg0, arg1)
}

// DeleteAvatar mocks base method.
func (m *MockAvatarsRepository) DeleteAvatar(arg0 context.Context, arg1 *entities.Avatar) (*entities.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAvatar", arg0, arg1)
	ret0, _ := ret[0].(*entities.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAvatar indicates an expected call of DeleteAvatar.
func (mr *MockAvatarsRepositoryMockRecorder) DeleteAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAvatar", reflect.TypeOf((*MockAvatarsRepository)(nil).DeleteAvatar), arg0, arg1)
}

// GetAvatarByID mocks base method.
func (m *MockAvatarsRepository) GetAvatarByID(arg0 context.Context, arg1 *entities.Avatar) (*entities.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatarByID", arg0, arg1)
	ret0, _ := ret[0].(*entities.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatarByID indicates an expected call of GetAvatarByID.
func (mr *MockAvatarsRepositoryMockRecorder) GetAvatarByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatarByID", reflect.TypeOf((*MockAvatarsRepository)(nil).GetAvatarByID), arg0, arg1)
}

// GetAvatarByProviderID mocks base method.
func (m *MockAvatarsRepository) GetAvatarByProviderID(arg0 context.Context, arg1 *entities.Avatar) (*entities.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatarByProviderID", arg0, arg1)
	ret0, _ := ret[0].(*entities.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatarByProviderID indicates an expected call of GetAvatarByProviderID.
func (mr *MockAvatarsRepositoryMockRecorder) GetAvatarByProviderID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatarByProviderID", reflect.TypeOf((*MockAvatarsRepository)(nil).GetAvatarByProviderID), arg0, arg1)
}

// UpdateAvatar mocks base method.
func (m *MockAvatarsRepository) UpdateAvatar(arg0 context.Context, arg1 *entities.Avatar) (*entities.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", arg0, arg1)
	ret0, _ := ret[0].(*entities.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAvatar indicates an expected call of UpdateAvatar.
func (mr *MockAvatarsRepositoryMockRecorder) UpdateAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockAvatarsRepository)(nil).UpdateAvatar), arg0, arg1)
}
