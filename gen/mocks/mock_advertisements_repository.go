// Code generated by MockGen. DO NOT EDIT.
// Source: study_marketplace/pkg/repositories (interfaces: AdvertisementsRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entities "study_marketplace/pkg/domain/models/entities"
	reqmodels "study_marketplace/pkg/domain/models/request_models"

	gomock "github.com/golang/mock/gomock"
)

// MockAdvertisementsRepository is a mock of AdvertisementsRepository interface.
type MockAdvertisementsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertisementsRepositoryMockRecorder
}

// MockAdvertisementsRepositoryMockRecorder is the mock recorder for MockAdvertisementsRepository.
type MockAdvertisementsRepositoryMockRecorder struct {
	mock *MockAdvertisementsRepository
}

// NewMockAdvertisementsRepository creates a new mock instance.
func NewMockAdvertisementsRepository(ctrl *gomock.Controller) *MockAdvertisementsRepository {
	mock := &MockAdvertisementsRepository{ctrl: ctrl}
	mock.recorder = &MockAdvertisementsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvertisementsRepository) EXPECT() *MockAdvertisementsRepositoryMockRecorder {
	return m.recorder
}

// CreateAdvertisement mocks base method.
func (m *MockAdvertisementsRepository) CreateAdvertisement(arg0 context.Context, arg1 *entities.Advertisement) (*entities.Advertisement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdvertisement", arg0, arg1)
	ret0, _ := ret[0].(*entities.Advertisement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdvertisement indicates an expected call of CreateAdvertisement.
func (mr *MockAdvertisementsRepositoryMockRecorder) CreateAdvertisement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdvertisement", reflect.TypeOf((*MockAdvertisementsRepository)(nil).CreateAdvertisement), arg0, arg1)
}

// DeleteAdvertisementByID mocks base method.
func (m *MockAdvertisementsRepository) DeleteAdvertisementByID(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdvertisementByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdvertisementByID indicates an expected call of DeleteAdvertisementByID.
func (mr *MockAdvertisementsRepositoryMockRecorder) DeleteAdvertisementByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdvertisementByID", reflect.TypeOf((*MockAdvertisementsRepository)(nil).DeleteAdvertisementByID), arg0, arg1, arg2)
}

// FilterAdvertisements mocks base method.
func (m *MockAdvertisementsRepository) FilterAdvertisements(arg0 context.Context, arg1 *reqmodels.AdvertisementFilterRequest) (*entities.AdvertisementPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAdvertisements", arg0, arg1)
	ret0, _ := ret[0].(*entities.AdvertisementPagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAdvertisements indicates an expected call of FilterAdvertisements.
func (mr *MockAdvertisementsRepositoryMockRecorder) FilterAdvertisements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAdvertisements", reflect.TypeOf((*MockAdvertisementsRepository)(nil).FilterAdvertisements), arg0, arg1)
}

// GetAdvertisementAll mocks base method.
func (m *MockAdvertisementsRepository) GetAdvertisementAll(arg0 context.Context) ([]entities.Advertisement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertisementAll", arg0)
	ret0, _ := ret[0].([]entities.Advertisement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertisementAll indicates an expected call of GetAdvertisementAll.
func (mr *MockAdvertisementsRepositoryMockRecorder) GetAdvertisementAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertisementAll", reflect.TypeOf((*MockAdvertisementsRepository)(nil).GetAdvertisementAll), arg0)
}

// GetAdvertisementByID mocks base method.
func (m *MockAdvertisementsRepository) GetAdvertisementByID(arg0 context.Context, arg1 int64) (*entities.Advertisement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertisementByID", arg0, arg1)
	ret0, _ := ret[0].(*entities.Advertisement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertisementByID indicates an expected call of GetAdvertisementByID.
func (mr *MockAdvertisementsRepositoryMockRecorder) GetAdvertisementByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertisementByID", reflect.TypeOf((*MockAdvertisementsRepository)(nil).GetAdvertisementByID), arg0, arg1)
}

// GetAdvertisementMy mocks base method.
func (m *MockAdvertisementsRepository) GetAdvertisementMy(arg0 context.Context, arg1 int64) ([]entities.Advertisement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertisementMy", arg0, arg1)
	ret0, _ := ret[0].([]entities.Advertisement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertisementMy indicates an expected call of GetAdvertisementMy.
func (mr *MockAdvertisementsRepositoryMockRecorder) GetAdvertisementMy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertisementMy", reflect.TypeOf((*MockAdvertisementsRepository)(nil).GetAdvertisementMy), arg0, arg1)
}

// UpdateAdvertisement mocks base method.
func (m *MockAdvertisementsRepository) UpdateAdvertisement(arg0 context.Context, arg1 *entities.Advertisement) (*entities.Advertisement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdvertisement", arg0, arg1)
	ret0, _ := ret[0].(*entities.Advertisement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdvertisement indicates an expected call of UpdateAdvertisement.
func (mr *MockAdvertisementsRepositoryMockRecorder) UpdateAdvertisement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdvertisement", reflect.TypeOf((*MockAdvertisementsRepository)(nil).UpdateAdvertisement), arg0, arg1)
}
