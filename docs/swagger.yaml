basePath: /
definitions:
  entities.PaginationInfo:
    properties:
      offset:
        type: integer
      page:
        type: integer
      per_page:
        type: integer
      total_count:
        type: integer
      total_pages:
        type: integer
    type: object
  queries.GetCategoriesWithChildrenRow:
    properties:
      children: {}
      parent_id:
        type: integer
      parent_name:
        type: string
    type: object
  reqmodels.AdvertisementFilterRequest:
    properties:
      category:
        type: string
      format:
        type: string
      language:
        type: string
      limitadv:
        type: integer
      maxexp:
        type: integer
      maxprice:
        type: integer
      minexp:
        type: integer
      minprice:
        type: integer
      offsetadv:
        type: integer
      orderby:
        type: string
      sortorder:
        type: string
      timelength:
        type: integer
      titlekeyword:
        type: string
    type: object
  reqmodels.CreateAdvertisementRequest:
    properties:
      attachment:
        type: string
      category:
        type: string
      description:
        type: string
      email:
        type: string
      experience:
        type: integer
      format:
        type: string
      language:
        type: string
      mobile_phone:
        type: string
      price:
        type: integer
      telegram:
        type: string
      time:
        type: integer
      title:
        type: string
    type: object
  reqmodels.DeleteAdvertisementRequest:
    properties:
      id:
        type: integer
    type: object
  reqmodels.LoginUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  reqmodels.PasswordCreateRequest:
    properties:
      password:
        type: string
    type: object
  reqmodels.PasswordResetRequest:
    properties:
      email:
        type: string
    type: object
  reqmodels.RegistractionUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  reqmodels.UpdateAdvertisementRequest:
    properties:
      attachment:
        type: string
      category:
        type: string
      description:
        type: string
      email:
        type: string
      experience:
        type: integer
      format:
        type: string
      id:
        type: integer
      language:
        type: string
      mobile_phone:
        type: string
      price:
        type: integer
      telegram:
        type: string
      time:
        type: integer
      title:
        type: string
    type: object
  reqmodels.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  respmodels.AdvertisementPaginationResponse:
    properties:
      data:
        $ref: '#/definitions/respmodels.ResponseAdvertismetPagin'
      status:
        type: string
    type: object
  respmodels.AdvertisementResponse:
    properties:
      data:
        $ref: '#/definitions/respmodels.ResponseAdvertismet'
      status:
        type: string
    type: object
  respmodels.AdvertisementsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/respmodels.ResponseAdvertismet'
        type: array
      status:
        type: string
    type: object
  respmodels.FaieldResponse:
    properties:
      data:
        type: string
      status:
        type: string
    type: object
  respmodels.ResponseAdvertismet:
    properties:
      attachment:
        type: string
      category_name:
        type: string
      created_at:
        type: string
      description:
        type: string
      email:
        type: string
      experience:
        type: integer
      format:
        type: string
      id:
        type: integer
      language:
        type: string
      mobile_phone:
        type: string
      price:
        type: integer
      provider_id:
        type: integer
      provider_name:
        type: string
      telegram:
        type: string
      time:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  respmodels.ResponseAdvertismetPagin:
    properties:
      advertisements:
        items:
          $ref: '#/definitions/respmodels.ResponseAdvertismet'
        type: array
      pagination_info:
        $ref: '#/definitions/entities.PaginationInfo'
    type: object
  respmodels.ResponseUser:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      photo:
        type: string
      role:
        type: string
      updated_at:
        type: string
      verified:
        type: boolean
    type: object
  respmodels.SignUpINresponse:
    properties:
      data:
        properties:
          token:
            type: string
        type: object
      status:
        type: string
    type: object
  respmodels.StringResponse:
    properties:
      data:
        type: string
      status:
        type: string
    type: object
  respmodels.UserInfoResponse:
    properties:
      data:
        $ref: '#/definitions/respmodels.ResponseUser'
      status:
        type: string
    type: object
info:
  contact:
    email: '[TODO]'
    name: API Support
    url: '[TODO]'
  description: Marketplace to connect students and teachers
  license:
    name: '[TODO]'
    url: '[TODO]'
  termsOfService: '[TODO]'
  title: Study marketplace API
  version: 0.0.1
paths:
  /api/:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/respmodels.StringResponse'
      summary: Show the status of server.
      tags:
      - root
  /api/auth/{provider}:
    get:
      consumes:
      - text/html
      description: requires param provider, for example google, facebook or apple  (at
        this moment apple not working) This request redirects to the provider's page
        for authorization, which in turn transmits a token in the parameters (token)
        and header (Authorization)
      parameters:
      - description: provider for auth
        in: path
        name: provider
        required: true
        type: string
      produces:
      - text/html
      responses:
        "302":
          description: Found
      summary: GET request for auth with provider
      tags:
      - auth_with_provider get request for auth with provider
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: requires email and password. Returns Authorization token in header
        as well
      parameters:
      - description: request info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/reqmodels.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/respmodels.SignUpINresponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/respmodels.FaieldResponse'
      summary: POST request for login
      tags:
      - login
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: requires email and password for registration. Returns user info
        and Authorization token  in header
      parameters:
      - description: user info for sign up
        in: body
        name: user_info
        required: true
        schema:
          $ref: '#/definitions/reqmodels.RegistractionUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/respmodels.SignUpINresponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/respmodels.FaieldResponse'
      summary: POST request for registration
      tags:
      - register
  /api/auth/reset-password:
    post:
      description: requires registred email address. TODO! This endpoint may not work
      parameters:
      - description: user email for update
        in: body
        name: reset-password
        required: true
        schema:
          $ref: '#/definitions/reqmodels.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/respmodels.StringResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/respmodels.FaieldResponse'
      summary: POST request to update password
      tags:
      - reset-password
  /open/advertisements/getall:
    get:
      description: endpoint for getting all advertisements
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/respmodels.AdvertisementsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/respmodels.FaieldResponse'
      summary: GET request to get 10 items sorted by creation date in desc order
      tags:
      - advertisements-getall
  /open/advertisements/getbyid/{id}:
    get:
      description: endpoint to get advertisement based on it's id
      parameters:
      - description: advertisement ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/respmodels.AdvertisementResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/respmodels.FaieldResponse'
      security:
      - JWT: []
      summary: GET request to get advertisement by id
      tags:
      - open/advertisements/getbyid/{id}
  /open/categories/getall:
    get:
      description: endpoint for getting all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/queries.GetCategoriesWithChildrenRow'
            type: array
      summary: GET all categories parents with children in array
      tags:
      - categories/getall
  /protected/advertisement-create:
    post:
      description: endpoint for advertisement creation
      parameters:
      - description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: advertisement information
        in: body
        name: advertisement-create
        required: true
        schema:
          $ref: '#/definitions/reqmodels.CreateAdvertisementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/respmodels.AdvertisementResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/respmodels.FaieldResponse'
      security:
      - JWT: []
      summary: POST request to create advertisement
      tags:
      - advertisement-create
  /protected/advertisement-delete:
    delete:
      description: endpoint for advertisement deletion by id
      parameters:
      - description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: advertisement id
        in: body
        name: advertisement-delete
        required: true
        schema:
          $ref: '#/definitions/reqmodels.DeleteAdvertisementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/respmodels.StringResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/respmodels.FaieldResponse'
      security:
      - JWT: []
      summary: DELETE request to delete advertisement
      tags:
      - advertisement-delete
  /protected/advertisement-filter:
    post:
      description: endpoint for getting specific advertisements
      parameters:
      - description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: advertisement filter
        in: body
        name: advertisement-filter
        required: true
        schema:
          $ref: '#/definitions/reqmodels.AdvertisementFilterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/respmodels.AdvertisementPaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/respmodels.FaieldResponse'
      security:
      - JWT: []
      summary: POST request to get advertisement based on params in filter
      tags:
      - advertisement-filter
  /protected/advertisement-getmy:
    get:
      description: endpoint for getting user advertisements
      parameters:
      - description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/respmodels.AdvertisementsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/respmodels.FaieldResponse'
      security:
      - JWT: []
      summary: GET request to get user created advertisements
      tags:
      - advertisements-getmy
  /protected/advertisement-patch:
    patch:
      description: endpoint for advertisement update
      parameters:
      - description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: advertisement information
        in: body
        name: advertisement-patch
        required: true
        schema:
          $ref: '#/definitions/reqmodels.UpdateAdvertisementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/respmodels.AdvertisementResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/respmodels.FaieldResponse'
      security:
      - JWT: []
      summary: PATCH request to update advertisement
      tags:
      - advertisement-patch
  /protected/create-password:
    patch:
      description: requires token. TODO! This endpoint may not work
      parameters:
      - description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: new user password
        in: body
        name: create-password
        required: true
        schema:
          $ref: '#/definitions/reqmodels.PasswordCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/respmodels.StringResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/respmodels.FaieldResponse'
      summary: PATCH request to create new password
      tags:
      - create-password
  /protected/user-patch:
    patch:
      description: requires valid token and user info for update. Returns user info
        and Authorization token in header
      parameters:
      - description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: user info for update
        in: body
        name: userinfo
        required: true
        schema:
          $ref: '#/definitions/reqmodels.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/respmodels.SignUpINresponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/respmodels.FaieldResponse'
      security:
      - JWT: []
      summary: PATCH request to update user
      tags:
      - user-patch
  /protected/userinfo:
    get:
      description: requires valid token
      parameters:
      - description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/respmodels.UserInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/respmodels.FaieldResponse'
      security:
      - JWT: []
      summary: Get request to see user info
      tags:
      - userinfo
schemes:
- http
- https
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
