// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const createOrUpdateUser = `-- name: CreateOrUpdateUser :one
WITH updated_user AS (
  UPDATE users
  SET 
    name = COALESCE($7::text, name),ex
    photo = COALESCE($8::text, photo),
    verified = COALESCE($9::bool, verified),
    password = COALESCE($10::text, password),
    role = COALESCE($11::text, role),
    updated_at = CURRENT_TIMESTAMP
  WHERE users.email = $2
  RETURNING id, name, email, photo, verified, password, role, created_at, updated_at
),
inserted_user AS (
  INSERT INTO users (name, email, photo, verified, password, role)
  SELECT $1, $2, $3, $4, $5, $6
  WHERE NOT EXISTS (SELECT 1 FROM updated_user)
  RETURNING id, name, email, photo, verified, password, role, created_at, updated_at
)
SELECT id, name, email, photo, verified, password, role, created_at, updated_at FROM updated_user
UNION ALL
SELECT id, name, email, photo, verified, password, role, created_at, updated_at FROM inserted_user
`

type CreateOrUpdateUserParams struct {
	Name       sql.NullString `json:"name"`
	Email      string         `json:"email"`
	Photo      sql.NullString `json:"photo"`
	Verified   bool           `json:"verified"`
	Password   sql.NullString `json:"password"`
	Role       string         `json:"role"`
	Name_2     sql.NullString `json:"name_2"`
	Photo_2    sql.NullString `json:"photo_2"`
	Verified_2 sql.NullBool   `json:"verified_2"`
	Password_2 sql.NullString `json:"password_2"`
	Role_2     sql.NullString `json:"role_2"`
}

type CreateOrUpdateUserRow struct {
	ID        int64          `json:"id"`
	Name      sql.NullString `json:"name"`
	Email     string         `json:"email"`
	Photo     sql.NullString `json:"photo"`
	Verified  bool           `json:"verified"`
	Password  sql.NullString `json:"password"`
	Role      string         `json:"role"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) CreateOrUpdateUser(ctx context.Context, arg CreateOrUpdateUserParams) (CreateOrUpdateUserRow, error) {
	row := q.db.QueryRow(ctx, createOrUpdateUser,
		arg.Name,
		arg.Email,
		arg.Photo,
		arg.Verified,
		arg.Password,
		arg.Role,
		arg.Name_2,
		arg.Photo_2,
		arg.Verified_2,
		arg.Password_2,
		arg.Role_2,
	)
	var i CreateOrUpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Photo,
		&i.Verified,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name,
  email,
  photo,
  verified,
  password,
  role
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, email, photo, verified, password, role, created_at, updated_at
`

type CreateUserParams struct {
	Name     sql.NullString `json:"name"`
	Email    string         `json:"email"`
	Photo    sql.NullString `json:"photo"`
	Verified bool           `json:"verified"`
	Password sql.NullString `json:"password"`
	Role     string         `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Photo,
		arg.Verified,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Photo,
		&i.Verified,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, photo, verified, password, role, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Photo,
		&i.Verified,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, photo, verified, password, role, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Photo,
		&i.Verified,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isUserEmailExist = `-- name: IsUserEmailExist :one
SELECT EXISTS ( SELECT 1 FROM users WHERE email = $1)
`

func (q *Queries) IsUserEmailExist(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, isUserEmailExist, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, photo, verified, password, role, created_at, updated_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Photo,
			&i.Verified,
			&i.Password,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
set name = COALESCE(NULLIF($2, ''), name),
email = COALESCE(NULLIF($3, ''), email),
password = COALESCE(NULLIF($4, ''), password),
photo = COALESCE(NULLIF($5, ''), photo),
updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, email, photo, verified, password, role, created_at, updated_at
`

type UpdateUserParams struct {
	ID      int64       `json:"id"`
	Column2 interface{} `json:"column_2"`
	Column3 interface{} `json:"column_3"`
	Column4 interface{} `json:"column_4"`
	Column5 interface{} `json:"column_5"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Photo,
		&i.Verified,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
