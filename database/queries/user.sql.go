// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package queries

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name,
  email,
  photo,
  verified,
  password,
  role,
  updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, name, email, photo, verified, password, role, created_at, updated_at
`

type CreateUserParams struct {
	Name      pgtype.Text `json:"name"`
	Email     string      `json:"email"`
	Photo     pgtype.Text `json:"photo"`
	Verified  bool        `json:"verified"`
	Password  pgtype.Text `json:"password"`
	Role      string      `json:"role"`
	UpdatedAt time.Time   `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Photo,
		arg.Verified,
		arg.Password,
		arg.Role,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Photo,
		&i.Verified,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createorUpdateUser = `-- name: CreateorUpdateUser :one
DO $$
  BEGIN
     PERFORM * FROM users WHERE email = $2;
  IF FOUND THEN
BEGIN
  UPDATE users SET 
    name = COALESCE($1, name),
    photo = COALESCE($3, photo),
    verified = COALESCE($4, verified),
    password = COALESCE($5, password),
    role = COALESCE($6, role),
    updated_at = CURRENT_TIMESTAMP
  WHERE email = $2
  RETURNING users.id, users.name, users.email, users.photo, users.verified, users.password, users.role, users.created_at, users.updated_at;
ELSE
  INSERT INTO users (
    name,
    email,
    photo,
    verified,
    password,
    role
  ) VALUES (
    $1, $2, $3, $4, $5, $6
  )
  RETURNING users.id, users.name, users.email, users.photo, users.verified, users.password, users.role, users.created_at, users.updated_at;
END IF;
END;
$$
`

type CreateOrUpdateUserParams struct {
	Name      pgtype.Text `json:"name"`
	Email     string      `json:"email"`
	Photo     pgtype.Text `json:"photo"`
	Verified  bool        `json:"verified"`
	Password  pgtype.Text `json:"password"`
	Role      string      `json:"role"`
	UpdatedAt time.Time   `json:"updated_at"`
}

func (q *Queries) CreateorUpdateUser(ctx context.Context, arg CreateOrUpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createorUpdateUser,
		arg.Name,
		arg.Email,
		arg.Photo,
		arg.Verified,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Photo,
		&i.Verified,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, photo, verified, password, role, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Photo,
		&i.Verified,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, photo, verified, password, role, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Photo,
		&i.Verified,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isUserEmailExist = `-- name: IsUserEmailExist :one
SELECT EXISTS ( SELECT 1 FROM users WHERE email = $1)
`

func (q *Queries) IsUserEmailExist(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, isUserEmailExist, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, photo, verified, password, role, created_at, updated_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Photo,
			&i.Verified,
			&i.Password,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
set name = COALESCE($2, name),
email = COALESCE($3, email),
photo = COALESCE($4, photo),
verified = COALESCE($5, verified),
password = COALESCE($6, password),
role = COALESCE($7, role),
updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, email, photo, verified, password, role, created_at, updated_at
`

type UpdateUserParams struct {
	ID       int64       `json:"id"`
	Name     pgtype.Text `json:"name"`
	Email    string      `json:"email"`
	Photo    pgtype.Text `json:"photo"`
	Verified bool        `json:"verified"`
	Password pgtype.Text `json:"password"`
	Role     string      `json:"role"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Photo,
		arg.Verified,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Photo,
		&i.Verified,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
