// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: avatars.sql

package queries

import (
	"context"
)

const createAvatar = `-- name: CreateAvatar :one
INSERT INTO avatars (filename, fileadress, data, provider_id) VALUES ($1, $2, $3, $4) RETURNING id, filename, fileadress, data, provider_id
`

type CreateAvatarParams struct {
	Filename   string `json:"filename"`
	Fileadress string `json:"fileadress"`
	Data       []byte `json:"data"`
	ProviderID int64  `json:"provider_id"`
}

func (q *Queries) CreateAvatar(ctx context.Context, arg CreateAvatarParams) (Avatar, error) {
	row := q.db.QueryRow(ctx, createAvatar,
		arg.Filename,
		arg.Fileadress,
		arg.Data,
		arg.ProviderID,
	)
	var i Avatar
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Fileadress,
		&i.Data,
		&i.ProviderID,
	)
	return i, err
}

const deleteAvatarByProviderID = `-- name: DeleteAvatarByProviderID :one
WITH deleted AS (
    DELETE FROM avatars WHERE provider_id = $1 RETURNING id, filename, fileadress, data, provider_id
)
SELECT COUNT(*) FROM deleted
`

func (q *Queries) DeleteAvatarByProviderID(ctx context.Context, providerID int64) (int64, error) {
	row := q.db.QueryRow(ctx, deleteAvatarByProviderID, providerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAvatarByID = `-- name: GetAvatarByID :one
SELECT id, filename, fileadress, data, provider_id FROM avatars WHERE id = $1
`

func (q *Queries) GetAvatarByID(ctx context.Context, id int64) (Avatar, error) {
	row := q.db.QueryRow(ctx, getAvatarByID, id)
	var i Avatar
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Fileadress,
		&i.Data,
		&i.ProviderID,
	)
	return i, err
}

const getAvatarByProviderID = `-- name: GetAvatarByProviderID :one
SELECT id, filename, fileadress, data, provider_id FROM avatars WHERE provider_id = $1
`

func (q *Queries) GetAvatarByProviderID(ctx context.Context, providerID int64) (Avatar, error) {
	row := q.db.QueryRow(ctx, getAvatarByProviderID, providerID)
	var i Avatar
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Fileadress,
		&i.Data,
		&i.ProviderID,
	)
	return i, err
}

const updateAvatarByProviderID = `-- name: UpdateAvatarByProviderID :one
UPDATE avatars SET 
    filename = COALESCE(NULLIF($1, ''), filename),
    fileadress = COALESCE(NULLIF($2, ''), fileadress),
    data = COALESCE(NULLIF($3, ''), data)
WHERE provider_id = $4 RETURNING id, filename, fileadress, data, provider_id
`

type UpdateAvatarByProviderIDParams struct {
	Column1    interface{} `json:"column_1"`
	Column2    interface{} `json:"column_2"`
	Column3    interface{} `json:"column_3"`
	ProviderID int64       `json:"provider_id"`
}

func (q *Queries) UpdateAvatarByProviderID(ctx context.Context, arg UpdateAvatarByProviderIDParams) (Avatar, error) {
	row := q.db.QueryRow(ctx, updateAvatarByProviderID,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.ProviderID,
	)
	var i Avatar
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Fileadress,
		&i.Data,
		&i.ProviderID,
	)
	return i, err
}
